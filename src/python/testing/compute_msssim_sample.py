""" Script to compute the MS-SSIM score of the samples of the LDM.

In order to measure the diversity of the samples generated by the LDM, we use the Multi-Scale Structural Similarity
(MS-SSIM) metric between 1000 samples.
"""
import argparse
from pathlib import Path

import numpy as np
import torch
from generative.metrics import MultiScaleSSIMMetric
from monai import transforms
from monai.config import print_config
from monai.data import Dataset
from monai.utils import set_determinism
from torch.utils.data import DataLoader
from tqdm import tqdm


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--seed", type=int, default=2, help="Random seed to use.")
    parser.add_argument("--sample_dir", help="Location of the samples to evaluate.")
    parser.add_argument("--num_workers", type=int, default=8, help="Number of loader workers")

    args = parser.parse_args()
    return args


def main(args):
    set_determinism(seed=args.seed)
    print_config()

    sample_dir = Path(args.sample_dir)
    sample_list = sorted(list(sample_dir.glob("*.nii.gz")))

    datalist = []
    for sample_path in sample_list:
        datalist.append(
            {
                "image": str(sample_path),
            }
        )

    eval_transforms = transforms.Compose(
        [
            transforms.LoadImaged(keys=["image"]),
            transforms.EnsureChannelFirstd(keys=["image"]),
            transforms.ScaleIntensityd(keys=["image"], minv=0.0, maxv=1.0),
            transforms.SpatialCropd(keys=["image"], roi_start=[16, 16, 96], roi_end=[176, 240, 256]),
            transforms.SpatialPadd(
                keys=["image"],
                spatial_size=[160, 224, 160],
            ),
            transforms.ToTensord(keys=["image"]),
        ]
    )

    eval_ds = Dataset(
        data=datalist,
        transform=eval_transforms,
    )
    eval_loader = DataLoader(
        eval_ds,
        batch_size=1,
        shuffle=False,
        num_workers=args.num_workers,
    )

    eval_ds_2 = Dataset(
        data=datalist,
        transform=eval_transforms,
    )
    eval_loader_2 = DataLoader(
        eval_ds_2,
        batch_size=1,
        shuffle=False,
        num_workers=args.num_workers,
    )

    device = torch.device("cuda")
    ms_ssim = MultiScaleSSIMMetric(spatial_dims=3, data_range=1.0, kernel_size=7)

    print("Computing MS-SSIM...")
    ms_ssim_list = []
    pbar = tqdm(enumerate(eval_loader), total=len(eval_loader))
    for step, batch in pbar:
        img = batch["image"]
        for batch2 in eval_loader_2:
            img2 = batch2["image"]
            if batch["image_meta_dict"]["filename_or_obj"][0] == batch2["image_meta_dict"]["filename_or_obj"][0]:
                continue
            ms_ssim_list.append(ms_ssim(img.to(device), img2.to(device)).item())
        pbar.update()

    ms_ssim_list = np.array(ms_ssim_list)
    print(f"Mean MS-SSIM: {ms_ssim_list.mean():.6f}")


if __name__ == "__main__":
    args = parse_args()
    main(args)
